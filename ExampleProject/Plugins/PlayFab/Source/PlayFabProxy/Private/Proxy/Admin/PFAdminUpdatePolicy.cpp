// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PlayFab.h"
#include "PFAdminUpdatePolicy.h"

UPFAdminUpdatePolicy::UPFAdminUpdatePolicy(const FObjectInitializer& ObjectInitializer)
	: Super(ObjectInitializer)
	, SuccessDelegate(PlayFab::UPlayFabAdminAPI::FUpdatePolicyDelegate::CreateUObject(this, &ThisClass::OnSuccessCallback))
	, ErrorDelegate(PlayFab::FPlayFabErrorDelegate::CreateUObject(this, &ThisClass::OnErrorCallback))
{
}

UPFAdminUpdatePolicy* UPFAdminUpdatePolicy::UpdatePolicy(UObject* WorldContextObject, class APlayerController* PlayerController , const FString& InPolicyName, const TArray<FBPAdminPermissionStatement>& InStatements, const bool& InOverwritePolicy)
{
	UPFAdminUpdatePolicy* Proxy = NewObject<UPFAdminUpdatePolicy>();
 	//Proxy->PlayerControllerWeakPtr = PlayerController;
	Proxy->Request.PolicyName = InPolicyName;
	for (const FBPAdminPermissionStatement& elem : InStatements)
    {
        Proxy->Request.Statements.Add(elem.Data);
    }

	Proxy->Request.OverwritePolicy = InOverwritePolicy;
	

 	//Proxy->WorldContextObject = WorldContextObject;
	return Proxy;
}

void UPFAdminUpdatePolicy::Activate()
{
	// grab the module, so we can get a valid pointer to the client API 
	PlayFabAdminPtr AdminAPI = IPlayFabModuleInterface::Get().GetAdminAPI();

	bool CallResult = false;

	if(AdminAPI.IsValid())
	{	
		CallResult = AdminAPI->UpdatePolicy(Request, SuccessDelegate, ErrorDelegate);
	}

	if(CallResult == false)
	{
		FBPAdminUpdatePolicyResponse BPResult;
 		OnFailure.Broadcast(BPResult);
	}
}


//////////////////////////////////////////////////////////////////////////
// Delegate handles
void UPFAdminUpdatePolicy::OnSuccessCallback(const PlayFab::AdminModels::FUpdatePolicyResponse& Result)
{
	FBPAdminUpdatePolicyResponse BPResult;
 	BPResult.Data = Result;
 	OnSuccess.Broadcast(BPResult);
}

void UPFAdminUpdatePolicy::OnErrorCallback(const PlayFab::FPlayFabError& InError)
{
	FBPAdminUpdatePolicyResponse BPResult;
 	OnFailure.Broadcast(BPResult);	
}
