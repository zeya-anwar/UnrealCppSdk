// This is automatically generated by PlayFab SDKGenerator. DO NOT modify this manually!
#include "PlayFabProxyPrivatePCH.h"
#include "PlayFabAdminBPLibrary.h"


void UPFAdminProxyLibrary::BreakBPAdminAbortTaskInstanceRequest(
		const FBPAdminAbortTaskInstanceRequest& In
        ,FString& OutTaskInstanceId
	)
{
    OutTaskInstanceId = In.Data.TaskInstanceId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminActionsOnPlayersInSegmentTaskParameter(
		const FBPAdminActionsOnPlayersInSegmentTaskParameter& In
        ,FString& OutSegmentId
        ,FString& OutActionId
	)
{
    OutSegmentId = In.Data.SegmentId;
	OutActionId = In.Data.ActionId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminActionsOnPlayersInSegmentTaskSummary(
		const FBPAdminActionsOnPlayersInSegmentTaskSummary& In
        ,FString& OutTaskInstanceId
        ,FBPAdminNameIdentifier& OutTaskIdentifier
        ,FDateTime& OutStartedAt
        ,FDateTime& OutCompletedAt
        ,float& OutPercentComplete
        ,float& OutEstimatedSecondsRemaining
        ,FString& OutScheduledByUserId
        ,FString& OutErrorMessage
        ,bool& OutErrorWasFatal
        ,int32& OutTotalPlayersInSegment
        ,int32& OutTotalPlayersProcessed
	)
{
    OutTaskInstanceId = In.Data.TaskInstanceId;
	if (In.Data.TaskIdentifier.IsValid()) {    OutTaskIdentifier.Data = *In.Data.TaskIdentifier;}
	
	
	
	OutPercentComplete = In.Data.PercentComplete;
	OutEstimatedSecondsRemaining = In.Data.EstimatedSecondsRemaining;
	OutScheduledByUserId = In.Data.ScheduledByUserId;
	OutErrorMessage = In.Data.ErrorMessage;
	OutErrorWasFatal = In.Data.ErrorWasFatal;
	OutTotalPlayersInSegment = In.Data.TotalPlayersInSegment;
	OutTotalPlayersProcessed = In.Data.TotalPlayersProcessed;
	
}

void UPFAdminProxyLibrary::BreakBPAdminAdCampaignAttribution(
		const FBPAdminAdCampaignAttribution& In
        ,FString& OutPlatform
        ,FString& OutCampaignId
        ,FDateTime& OutAttributedAt
	)
{
    OutPlatform = In.Data.Platform;
	OutCampaignId = In.Data.CampaignId;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminAddNewsRequest(
		const FBPAdminAddNewsRequest& In
        ,FDateTime& OutTimestamp
        ,FString& OutTitle
        ,FString& OutBody
	)
{
    
	OutTitle = In.Data.Title;
	OutBody = In.Data.Body;
	
}

void UPFAdminProxyLibrary::BreakBPAdminAddNewsResult(
		const FBPAdminAddNewsResult& In
        ,FString& OutNewsId
	)
{
    OutNewsId = In.Data.NewsId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminAddPlayerTagRequest(
		const FBPAdminAddPlayerTagRequest& In
        ,FString& OutPlayFabId
        ,FString& OutTagName
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutTagName = In.Data.TagName;
	
}

void UPFAdminProxyLibrary::BreakBPAdminAddPlayerTagResult(
		const FBPAdminAddPlayerTagResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminAddServerBuildRequest(
		const FBPAdminAddServerBuildRequest& In
        ,FString& OutBuildId
        ,FString& OutCommandLineTemplate
        ,FString& OutExecutablePath
        ,FString& OutComment
        ,int32& OutMaxGamesPerHost
        ,int32& OutMinFreeGameSlots
	)
{
    OutBuildId = In.Data.BuildId;
	OutCommandLineTemplate = In.Data.CommandLineTemplate;
	OutExecutablePath = In.Data.ExecutablePath;
	
	OutComment = In.Data.Comment;
	OutMaxGamesPerHost = In.Data.MaxGamesPerHost;
	OutMinFreeGameSlots = In.Data.MinFreeGameSlots;
	
}

void UPFAdminProxyLibrary::BreakBPAdminAddServerBuildResult(
		const FBPAdminAddServerBuildResult& In
        ,FString& OutBuildId
        ,int32& OutMaxGamesPerHost
        ,int32& OutMinFreeGameSlots
        ,FString& OutCommandLineTemplate
        ,FString& OutExecutablePath
        ,FString& OutComment
        ,FDateTime& OutTimestamp
        ,FString& OutTitleId
	)
{
    OutBuildId = In.Data.BuildId;
	
	OutMaxGamesPerHost = In.Data.MaxGamesPerHost;
	OutMinFreeGameSlots = In.Data.MinFreeGameSlots;
	OutCommandLineTemplate = In.Data.CommandLineTemplate;
	OutExecutablePath = In.Data.ExecutablePath;
	OutComment = In.Data.Comment;
	
	OutTitleId = In.Data.TitleId;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminAddUserVirtualCurrencyRequest(
		const FBPAdminAddUserVirtualCurrencyRequest& In
        ,FString& OutPlayFabId
        ,FString& OutVirtualCurrency
        ,int32& OutAmount
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutVirtualCurrency = In.Data.VirtualCurrency;
	OutAmount = In.Data.Amount;
	
}

void UPFAdminProxyLibrary::BreakBPAdminAddVirtualCurrencyTypesRequest(
		const FBPAdminAddVirtualCurrencyTypesRequest& In
        ,TArray<FBPAdminVirtualCurrencyData>& OutVirtualCurrencies
	)
{
    for (const PlayFab::AdminModels::FVirtualCurrencyData& elem : In.Data.VirtualCurrencies)
    {
        FBPAdminVirtualCurrencyData result;
        result.Data = elem;
        OutVirtualCurrencies.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminBanInfo(
		const FBPAdminBanInfo& In
        ,FString& OutPlayFabId
        ,FString& OutBanId
        ,FString& OutIPAddress
        ,FString& OutMACAddress
        ,FDateTime& OutCreated
        ,FDateTime& OutExpires
        ,FString& OutReason
        ,bool& OutActive
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutBanId = In.Data.BanId;
	OutIPAddress = In.Data.IPAddress;
	OutMACAddress = In.Data.MACAddress;
	
	
	OutReason = In.Data.Reason;
	OutActive = In.Data.Active;
	
}

void UPFAdminProxyLibrary::BreakBPAdminBanRequest(
		const FBPAdminBanRequest& In
        ,FString& OutPlayFabId
        ,FString& OutIPAddress
        ,FString& OutMACAddress
        ,FString& OutReason
        ,int32& OutDurationInHours
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutIPAddress = In.Data.IPAddress;
	OutMACAddress = In.Data.MACAddress;
	OutReason = In.Data.Reason;
	OutDurationInHours = In.Data.DurationInHours;
	
}

void UPFAdminProxyLibrary::BreakBPAdminBanUsersRequest(
		const FBPAdminBanUsersRequest& In
        ,TArray<FBPAdminBanRequest>& OutBans
	)
{
    for (const PlayFab::AdminModels::FBanRequest& elem : In.Data.Bans)
    {
        FBPAdminBanRequest result;
        result.Data = elem;
        OutBans.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminBanUsersResult(
		const FBPAdminBanUsersResult& In
        ,TArray<FBPAdminBanInfo>& OutBanData
	)
{
    for (const PlayFab::AdminModels::FBanInfo& elem : In.Data.BanData)
    {
        FBPAdminBanInfo result;
        result.Data = elem;
        OutBanData.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminBlankResult(
		const FBPAdminBlankResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminCatalogItem(
		const FBPAdminCatalogItem& In
        ,FString& OutItemId
        ,FString& OutItemClass
        ,FString& OutCatalogVersion
        ,FString& OutDisplayName
        ,FString& OutDescription
        ,TArray<FString>& OutTags
        ,FString& OutCustomData
        ,FBPAdminCatalogItemConsumableInfo& OutConsumable
        ,FBPAdminCatalogItemContainerInfo& OutContainer
        ,FBPAdminCatalogItemBundleInfo& OutBundle
        ,bool& OutCanBecomeCharacter
        ,bool& OutIsStackable
        ,bool& OutIsTradable
        ,FString& OutItemImageUrl
        ,bool& OutIsLimitedEdition
        ,int32& OutInitialLimitedEditionCount
	)
{
    OutItemId = In.Data.ItemId;
	OutItemClass = In.Data.ItemClass;
	OutCatalogVersion = In.Data.CatalogVersion;
	OutDisplayName = In.Data.DisplayName;
	OutDescription = In.Data.Description;
	
	
	OutTags = In.Data.Tags;
	OutCustomData = In.Data.CustomData;
	if (In.Data.Consumable.IsValid()) {    OutConsumable.Data = *In.Data.Consumable;}
	if (In.Data.Container.IsValid()) {    OutContainer.Data = *In.Data.Container;}
	if (In.Data.Bundle.IsValid()) {    OutBundle.Data = *In.Data.Bundle;}
	OutCanBecomeCharacter = In.Data.CanBecomeCharacter;
	OutIsStackable = In.Data.IsStackable;
	OutIsTradable = In.Data.IsTradable;
	OutItemImageUrl = In.Data.ItemImageUrl;
	OutIsLimitedEdition = In.Data.IsLimitedEdition;
	OutInitialLimitedEditionCount = In.Data.InitialLimitedEditionCount;
	
}

void UPFAdminProxyLibrary::BreakBPAdminCatalogItemBundleInfo(
		const FBPAdminCatalogItemBundleInfo& In
        ,TArray<FString>& OutBundledItems
        ,TArray<FString>& OutBundledResultTables
	)
{
    OutBundledItems = In.Data.BundledItems;
	OutBundledResultTables = In.Data.BundledResultTables;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminCatalogItemConsumableInfo(
		const FBPAdminCatalogItemConsumableInfo& In
        ,int32& OutUsageCount
        ,int32& OutUsagePeriod
        ,FString& OutUsagePeriodGroup
	)
{
    OutUsageCount = In.Data.UsageCount;
	OutUsagePeriod = In.Data.UsagePeriod;
	OutUsagePeriodGroup = In.Data.UsagePeriodGroup;
	
}

void UPFAdminProxyLibrary::BreakBPAdminCatalogItemContainerInfo(
		const FBPAdminCatalogItemContainerInfo& In
        ,FString& OutKeyItemId
        ,TArray<FString>& OutItemContents
        ,TArray<FString>& OutResultTableContents
	)
{
    OutKeyItemId = In.Data.KeyItemId;
	OutItemContents = In.Data.ItemContents;
	OutResultTableContents = In.Data.ResultTableContents;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminCloudScriptFile(
		const FBPAdminCloudScriptFile& In
        ,FString& OutFilename
        ,FString& OutFileContents
	)
{
    OutFilename = In.Data.Filename;
	OutFileContents = In.Data.FileContents;
	
}

void UPFAdminProxyLibrary::BreakBPAdminCloudScriptTaskParameter(
		const FBPAdminCloudScriptTaskParameter& In
        ,FString& OutFunctionName
	)
{
    OutFunctionName = In.Data.FunctionName;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminCloudScriptTaskSummary(
		const FBPAdminCloudScriptTaskSummary& In
        ,FString& OutTaskInstanceId
        ,FBPAdminNameIdentifier& OutTaskIdentifier
        ,FDateTime& OutStartedAt
        ,FDateTime& OutCompletedAt
        ,float& OutPercentComplete
        ,float& OutEstimatedSecondsRemaining
        ,FString& OutScheduledByUserId
        ,FBPAdminExecuteCloudScriptResult& OutResult
	)
{
    OutTaskInstanceId = In.Data.TaskInstanceId;
	if (In.Data.TaskIdentifier.IsValid()) {    OutTaskIdentifier.Data = *In.Data.TaskIdentifier;}
	
	
	
	OutPercentComplete = In.Data.PercentComplete;
	OutEstimatedSecondsRemaining = In.Data.EstimatedSecondsRemaining;
	OutScheduledByUserId = In.Data.ScheduledByUserId;
	if (In.Data.Result.IsValid()) {    OutResult.Data = *In.Data.Result;}
	
}

void UPFAdminProxyLibrary::BreakBPAdminCloudScriptVersionStatus(
		const FBPAdminCloudScriptVersionStatus& In
        ,int32& OutVersion
        ,int32& OutPublishedRevision
        ,int32& OutLatestRevision
	)
{
    OutVersion = In.Data.Version;
	OutPublishedRevision = In.Data.PublishedRevision;
	OutLatestRevision = In.Data.LatestRevision;
	
}

void UPFAdminProxyLibrary::BreakBPAdminContentInfo(
		const FBPAdminContentInfo& In
        ,FString& OutKey
        ,int32& OutSize
        ,FDateTime& OutLastModified
	)
{
    OutKey = In.Data.Key;
	OutSize = In.Data.Size;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminContinentCode(
		const FBPAdminContinentCode& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminCountryCode(
		const FBPAdminCountryCode& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminCreateActionsOnPlayerSegmentTaskRequest(
		const FBPAdminCreateActionsOnPlayerSegmentTaskRequest& In
        ,FString& OutName
        ,FString& OutDescription
        ,FString& OutSchedule
        ,bool& OutIsActive
        ,FBPAdminActionsOnPlayersInSegmentTaskParameter& OutParameter
	)
{
    OutName = In.Data.Name;
	OutDescription = In.Data.Description;
	OutSchedule = In.Data.Schedule;
	OutIsActive = In.Data.IsActive;
	OutParameter.Data = In.Data.Parameter;
	
}

void UPFAdminProxyLibrary::BreakBPAdminCreateCloudScriptTaskRequest(
		const FBPAdminCreateCloudScriptTaskRequest& In
        ,FString& OutName
        ,FString& OutDescription
        ,FString& OutSchedule
        ,bool& OutIsActive
        ,FBPAdminCloudScriptTaskParameter& OutParameter
	)
{
    OutName = In.Data.Name;
	OutDescription = In.Data.Description;
	OutSchedule = In.Data.Schedule;
	OutIsActive = In.Data.IsActive;
	OutParameter.Data = In.Data.Parameter;
	
}

void UPFAdminProxyLibrary::BreakBPAdminCreatePlayerStatisticDefinitionRequest(
		const FBPAdminCreatePlayerStatisticDefinitionRequest& In
        ,FString& OutStatisticName
	)
{
    OutStatisticName = In.Data.StatisticName;
	
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminCreatePlayerStatisticDefinitionResult(
		const FBPAdminCreatePlayerStatisticDefinitionResult& In
        ,FBPAdminPlayerStatisticDefinition& OutStatistic
	)
{
    if (In.Data.Statistic.IsValid()) {    OutStatistic.Data = *In.Data.Statistic;}
	
}

void UPFAdminProxyLibrary::BreakBPAdminCreateTaskResult(
		const FBPAdminCreateTaskResult& In
        ,FString& OutTaskId
	)
{
    OutTaskId = In.Data.TaskId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminCurrency(
		const FBPAdminCurrency& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminDeleteContentRequest(
		const FBPAdminDeleteContentRequest& In
        ,FString& OutKey
	)
{
    OutKey = In.Data.Key;
	
}

void UPFAdminProxyLibrary::BreakBPAdminDeleteStoreRequest(
		const FBPAdminDeleteStoreRequest& In
        ,FString& OutCatalogVersion
        ,FString& OutStoreId
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	OutStoreId = In.Data.StoreId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminDeleteStoreResult(
		const FBPAdminDeleteStoreResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminDeleteTaskRequest(
		const FBPAdminDeleteTaskRequest& In
        ,FBPAdminNameIdentifier& OutIdentifier
	)
{
    if (In.Data.Identifier.IsValid()) {    OutIdentifier.Data = *In.Data.Identifier;}
	
}

void UPFAdminProxyLibrary::BreakBPAdminDeleteUsersRequest(
		const FBPAdminDeleteUsersRequest& In
        ,TArray<FString>& OutPlayFabIds
        ,FString& OutTitleId
	)
{
    OutPlayFabIds = In.Data.PlayFabIds;
	OutTitleId = In.Data.TitleId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminDeleteUsersResult(
		const FBPAdminDeleteUsersResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminEffectType(
		const FBPAdminEffectType& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminEmptyResult(
		const FBPAdminEmptyResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminExecuteCloudScriptResult(
		const FBPAdminExecuteCloudScriptResult& In
        ,FString& OutFunctionName
        ,int32& OutRevision
        ,TArray<FBPAdminLogStatement>& OutLogs
        ,float& OutExecutionTimeSeconds
        ,float& OutProcessorTimeSeconds
        ,int32& OutMemoryConsumedBytes
        ,int32& OutAPIRequestsIssued
        ,int32& OutHttpRequestsIssued
        ,FBPAdminScriptExecutionError& OutError
	)
{
    OutFunctionName = In.Data.FunctionName;
	OutRevision = In.Data.Revision;
	
	for (const PlayFab::AdminModels::FLogStatement& elem : In.Data.Logs)
    {
        FBPAdminLogStatement result;
        result.Data = elem;
        OutLogs.Add(result);
    }

	OutExecutionTimeSeconds = In.Data.ExecutionTimeSeconds;
	OutProcessorTimeSeconds = In.Data.ProcessorTimeSeconds;
	OutMemoryConsumedBytes = In.Data.MemoryConsumedBytes;
	OutAPIRequestsIssued = In.Data.APIRequestsIssued;
	OutHttpRequestsIssued = In.Data.HttpRequestsIssued;
	if (In.Data.Error.IsValid()) {    OutError.Data = *In.Data.Error;}
	
}

void UPFAdminProxyLibrary::BreakBPAdminGameBuildStatus(
		const FBPAdminGameBuildStatus& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminGameModeInfo(
		const FBPAdminGameModeInfo& In
        ,FString& OutGamemode
        ,int32& OutMinPlayerCount
        ,int32& OutMaxPlayerCount
        ,bool& OutStartOpen
	)
{
    OutGamemode = In.Data.Gamemode;
	OutMinPlayerCount = In.Data.MinPlayerCount;
	OutMaxPlayerCount = In.Data.MaxPlayerCount;
	OutStartOpen = In.Data.StartOpen;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetActionGroupResult(
		const FBPAdminGetActionGroupResult& In
        ,FString& OutName
        ,FString& OutId
	)
{
    OutName = In.Data.Name;
	OutId = In.Data.Id;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetActionsOnPlayersInSegmentTaskInstanceResult(
		const FBPAdminGetActionsOnPlayersInSegmentTaskInstanceResult& In
        ,FBPAdminActionsOnPlayersInSegmentTaskSummary& OutSummary
        ,FBPAdminActionsOnPlayersInSegmentTaskParameter& OutParameter
	)
{
    if (In.Data.Summary.IsValid()) {    OutSummary.Data = *In.Data.Summary;}
	if (In.Data.Parameter.IsValid()) {    OutParameter.Data = *In.Data.Parameter;}
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetAllActionGroupsRequest(
		const FBPAdminGetAllActionGroupsRequest& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminGetAllActionGroupsResult(
		const FBPAdminGetAllActionGroupsResult& In
        ,TArray<FBPAdminGetActionGroupResult>& OutActionGroups
	)
{
    for (const PlayFab::AdminModels::FGetActionGroupResult& elem : In.Data.ActionGroups)
    {
        FBPAdminGetActionGroupResult result;
        result.Data = elem;
        OutActionGroups.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminGetAllSegmentsRequest(
		const FBPAdminGetAllSegmentsRequest& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminGetAllSegmentsResult(
		const FBPAdminGetAllSegmentsResult& In
        ,TArray<FBPAdminGetSegmentResult>& OutSegments
	)
{
    for (const PlayFab::AdminModels::FGetSegmentResult& elem : In.Data.Segments)
    {
        FBPAdminGetSegmentResult result;
        result.Data = elem;
        OutSegments.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminGetCatalogItemsRequest(
		const FBPAdminGetCatalogItemsRequest& In
        ,FString& OutCatalogVersion
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetCatalogItemsResult(
		const FBPAdminGetCatalogItemsResult& In
        ,TArray<FBPAdminCatalogItem>& OutCatalog
	)
{
    for (const PlayFab::AdminModels::FCatalogItem& elem : In.Data.Catalog)
    {
        FBPAdminCatalogItem result;
        result.Data = elem;
        OutCatalog.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminGetCloudScriptRevisionRequest(
		const FBPAdminGetCloudScriptRevisionRequest& In
        ,int32& OutVersion
        ,int32& OutRevision
	)
{
    OutVersion = In.Data.Version;
	OutRevision = In.Data.Revision;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetCloudScriptRevisionResult(
		const FBPAdminGetCloudScriptRevisionResult& In
        ,int32& OutVersion
        ,int32& OutRevision
        ,FDateTime& OutCreatedAt
        ,TArray<FBPAdminCloudScriptFile>& OutFiles
        ,bool& OutIsPublished
	)
{
    OutVersion = In.Data.Version;
	OutRevision = In.Data.Revision;
	
	for (const PlayFab::AdminModels::FCloudScriptFile& elem : In.Data.Files)
    {
        FBPAdminCloudScriptFile result;
        result.Data = elem;
        OutFiles.Add(result);
    }

	OutIsPublished = In.Data.IsPublished;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetCloudScriptTaskInstanceResult(
		const FBPAdminGetCloudScriptTaskInstanceResult& In
        ,FBPAdminCloudScriptTaskSummary& OutSummary
        ,FBPAdminCloudScriptTaskParameter& OutParameter
	)
{
    if (In.Data.Summary.IsValid()) {    OutSummary.Data = *In.Data.Summary;}
	if (In.Data.Parameter.IsValid()) {    OutParameter.Data = *In.Data.Parameter;}
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetCloudScriptVersionsRequest(
		const FBPAdminGetCloudScriptVersionsRequest& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminGetCloudScriptVersionsResult(
		const FBPAdminGetCloudScriptVersionsResult& In
        ,TArray<FBPAdminCloudScriptVersionStatus>& OutVersions
	)
{
    for (const PlayFab::AdminModels::FCloudScriptVersionStatus& elem : In.Data.Versions)
    {
        FBPAdminCloudScriptVersionStatus result;
        result.Data = elem;
        OutVersions.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminGetContentListRequest(
		const FBPAdminGetContentListRequest& In
        ,FString& OutPrefix
	)
{
    OutPrefix = In.Data.Prefix;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetContentListResult(
		const FBPAdminGetContentListResult& In
        ,int32& OutItemCount
        ,int32& OutTotalSize
        ,TArray<FBPAdminContentInfo>& OutContents
	)
{
    OutItemCount = In.Data.ItemCount;
	OutTotalSize = In.Data.TotalSize;
	for (const PlayFab::AdminModels::FContentInfo& elem : In.Data.Contents)
    {
        FBPAdminContentInfo result;
        result.Data = elem;
        OutContents.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminGetContentUploadUrlRequest(
		const FBPAdminGetContentUploadUrlRequest& In
        ,FString& OutKey
        ,FString& OutContentType
	)
{
    OutKey = In.Data.Key;
	OutContentType = In.Data.ContentType;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetContentUploadUrlResult(
		const FBPAdminGetContentUploadUrlResult& In
        ,FString& OutURL
	)
{
    OutURL = In.Data.URL;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetDataReportRequest(
		const FBPAdminGetDataReportRequest& In
        ,FString& OutReportName
        ,int32& OutYear
        ,int32& OutMonth
        ,int32& OutDay
	)
{
    OutReportName = In.Data.ReportName;
	OutYear = In.Data.Year;
	OutMonth = In.Data.Month;
	OutDay = In.Data.Day;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetDataReportResult(
		const FBPAdminGetDataReportResult& In
        ,FString& OutDownloadUrl
	)
{
    OutDownloadUrl = In.Data.DownloadUrl;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetMatchmakerGameInfoRequest(
		const FBPAdminGetMatchmakerGameInfoRequest& In
        ,FString& OutLobbyId
	)
{
    OutLobbyId = In.Data.LobbyId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetMatchmakerGameInfoResult(
		const FBPAdminGetMatchmakerGameInfoResult& In
        ,FString& OutLobbyId
        ,FString& OutTitleId
        ,FDateTime& OutStartTime
        ,FDateTime& OutEndTime
        ,FString& OutMode
        ,FString& OutBuildVersion
        ,TArray<FString>& OutPlayers
        ,FString& OutServerAddress
        ,int32& OutServerPort
	)
{
    OutLobbyId = In.Data.LobbyId;
	OutTitleId = In.Data.TitleId;
	
	
	OutMode = In.Data.Mode;
	OutBuildVersion = In.Data.BuildVersion;
	
	OutPlayers = In.Data.Players;
	OutServerAddress = In.Data.ServerAddress;
	OutServerPort = In.Data.ServerPort;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetMatchmakerGameModesRequest(
		const FBPAdminGetMatchmakerGameModesRequest& In
        ,FString& OutBuildVersion
	)
{
    OutBuildVersion = In.Data.BuildVersion;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetMatchmakerGameModesResult(
		const FBPAdminGetMatchmakerGameModesResult& In
        ,TArray<FBPAdminGameModeInfo>& OutGameModes
	)
{
    for (const PlayFab::AdminModels::FGameModeInfo& elem : In.Data.GameModes)
    {
        FBPAdminGameModeInfo result;
        result.Data = elem;
        OutGameModes.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminGetPlayerSegmentsResult(
		const FBPAdminGetPlayerSegmentsResult& In
        ,TArray<FBPAdminGetSegmentResult>& OutSegments
	)
{
    for (const PlayFab::AdminModels::FGetSegmentResult& elem : In.Data.Segments)
    {
        FBPAdminGetSegmentResult result;
        result.Data = elem;
        OutSegments.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminGetPlayersInSegmentRequest(
		const FBPAdminGetPlayersInSegmentRequest& In
        ,FString& OutSegmentId
        ,int32& OutSecondsToLive
        ,int32& OutMaxBatchSize
        ,FString& OutContinuationToken
	)
{
    OutSegmentId = In.Data.SegmentId;
	OutSecondsToLive = In.Data.SecondsToLive;
	OutMaxBatchSize = In.Data.MaxBatchSize;
	OutContinuationToken = In.Data.ContinuationToken;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetPlayersInSegmentResult(
		const FBPAdminGetPlayersInSegmentResult& In
        ,int32& OutProfilesInSegment
        ,FString& OutContinuationToken
        ,TArray<FBPAdminPlayerProfile>& OutPlayerProfiles
	)
{
    OutProfilesInSegment = In.Data.ProfilesInSegment;
	OutContinuationToken = In.Data.ContinuationToken;
	for (const PlayFab::AdminModels::FPlayerProfile& elem : In.Data.PlayerProfiles)
    {
        FBPAdminPlayerProfile result;
        result.Data = elem;
        OutPlayerProfiles.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminGetPlayersSegmentsRequest(
		const FBPAdminGetPlayersSegmentsRequest& In
        ,FString& OutPlayFabId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetPlayerStatisticDefinitionsRequest(
		const FBPAdminGetPlayerStatisticDefinitionsRequest& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminGetPlayerStatisticDefinitionsResult(
		const FBPAdminGetPlayerStatisticDefinitionsResult& In
        ,TArray<FBPAdminPlayerStatisticDefinition>& OutStatistics
	)
{
    for (const PlayFab::AdminModels::FPlayerStatisticDefinition& elem : In.Data.Statistics)
    {
        FBPAdminPlayerStatisticDefinition result;
        result.Data = elem;
        OutStatistics.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminGetPlayerStatisticVersionsRequest(
		const FBPAdminGetPlayerStatisticVersionsRequest& In
        ,FString& OutStatisticName
	)
{
    OutStatisticName = In.Data.StatisticName;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetPlayerStatisticVersionsResult(
		const FBPAdminGetPlayerStatisticVersionsResult& In
        ,TArray<FBPAdminPlayerStatisticVersion>& OutStatisticVersions
	)
{
    for (const PlayFab::AdminModels::FPlayerStatisticVersion& elem : In.Data.StatisticVersions)
    {
        FBPAdminPlayerStatisticVersion result;
        result.Data = elem;
        OutStatisticVersions.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminGetPlayerTagsRequest(
		const FBPAdminGetPlayerTagsRequest& In
        ,FString& OutPlayFabId
        ,FString& OutNamespace
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutNamespace = In.Data.Namespace;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetPlayerTagsResult(
		const FBPAdminGetPlayerTagsResult& In
        ,FString& OutPlayFabId
        ,TArray<FString>& OutTags
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutTags = In.Data.Tags;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetPolicyRequest(
		const FBPAdminGetPolicyRequest& In
        ,FString& OutPolicyName
	)
{
    OutPolicyName = In.Data.PolicyName;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetPolicyResponse(
		const FBPAdminGetPolicyResponse& In
        ,FString& OutPolicyName
        ,TArray<FBPAdminPermissionStatement>& OutStatements
	)
{
    OutPolicyName = In.Data.PolicyName;
	for (const PlayFab::AdminModels::FPermissionStatement& elem : In.Data.Statements)
    {
        FBPAdminPermissionStatement result;
        result.Data = elem;
        OutStatements.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminGetPublisherDataRequest(
		const FBPAdminGetPublisherDataRequest& In
        ,TArray<FString>& OutKeys
	)
{
    OutKeys = In.Data.Keys;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetPublisherDataResult(
		const FBPAdminGetPublisherDataResult& In
	)
{
    
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetRandomResultTablesRequest(
		const FBPAdminGetRandomResultTablesRequest& In
        ,FString& OutCatalogVersion
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetRandomResultTablesResult(
		const FBPAdminGetRandomResultTablesResult& In
	)
{
    
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetSegmentResult(
		const FBPAdminGetSegmentResult& In
        ,FString& OutId
        ,FString& OutName
        ,FString& OutABTestParent
	)
{
    OutId = In.Data.Id;
	OutName = In.Data.Name;
	OutABTestParent = In.Data.ABTestParent;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetServerBuildInfoRequest(
		const FBPAdminGetServerBuildInfoRequest& In
        ,FString& OutBuildId
	)
{
    OutBuildId = In.Data.BuildId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetServerBuildInfoResult(
		const FBPAdminGetServerBuildInfoResult& In
        ,FString& OutBuildId
        ,int32& OutMaxGamesPerHost
        ,int32& OutMinFreeGameSlots
        ,FString& OutComment
        ,FDateTime& OutTimestamp
        ,FString& OutTitleId
        ,FString& OutErrorMessage
	)
{
    OutBuildId = In.Data.BuildId;
	
	OutMaxGamesPerHost = In.Data.MaxGamesPerHost;
	OutMinFreeGameSlots = In.Data.MinFreeGameSlots;
	OutComment = In.Data.Comment;
	
	OutTitleId = In.Data.TitleId;
	
	OutErrorMessage = In.Data.ErrorMessage;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetServerBuildUploadURLRequest(
		const FBPAdminGetServerBuildUploadURLRequest& In
        ,FString& OutBuildId
	)
{
    OutBuildId = In.Data.BuildId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetServerBuildUploadURLResult(
		const FBPAdminGetServerBuildUploadURLResult& In
        ,FString& OutURL
	)
{
    OutURL = In.Data.URL;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetStoreItemsRequest(
		const FBPAdminGetStoreItemsRequest& In
        ,FString& OutCatalogVersion
        ,FString& OutStoreId
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	OutStoreId = In.Data.StoreId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetStoreItemsResult(
		const FBPAdminGetStoreItemsResult& In
        ,TArray<FBPAdminStoreItem>& OutStore
        ,FString& OutCatalogVersion
        ,FString& OutStoreId
        ,FBPAdminStoreMarketingModel& OutMarketingData
	)
{
    for (const PlayFab::AdminModels::FStoreItem& elem : In.Data.Store)
    {
        FBPAdminStoreItem result;
        result.Data = elem;
        OutStore.Add(result);
    }

	
	OutCatalogVersion = In.Data.CatalogVersion;
	OutStoreId = In.Data.StoreId;
	if (In.Data.MarketingData.IsValid()) {    OutMarketingData.Data = *In.Data.MarketingData;}
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetTaskInstanceRequest(
		const FBPAdminGetTaskInstanceRequest& In
        ,FString& OutTaskInstanceId
	)
{
    OutTaskInstanceId = In.Data.TaskInstanceId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetTaskInstancesRequest(
		const FBPAdminGetTaskInstancesRequest& In
        ,FBPAdminNameIdentifier& OutTaskIdentifier
        ,FDateTime& OutStartedAtRangeFrom
        ,FDateTime& OutStartedAtRangeTo
	)
{
    if (In.Data.TaskIdentifier.IsValid()) {    OutTaskIdentifier.Data = *In.Data.TaskIdentifier;}
	
	
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetTaskInstancesResult(
		const FBPAdminGetTaskInstancesResult& In
        ,TArray<FBPAdminTaskInstanceBasicSummary>& OutSummaries
	)
{
    for (const PlayFab::AdminModels::FTaskInstanceBasicSummary& elem : In.Data.Summaries)
    {
        FBPAdminTaskInstanceBasicSummary result;
        result.Data = elem;
        OutSummaries.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminGetTasksRequest(
		const FBPAdminGetTasksRequest& In
        ,FBPAdminNameIdentifier& OutIdentifier
	)
{
    if (In.Data.Identifier.IsValid()) {    OutIdentifier.Data = *In.Data.Identifier;}
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetTasksResult(
		const FBPAdminGetTasksResult& In
        ,TArray<FBPAdminScheduledTask>& OutTasks
	)
{
    for (const PlayFab::AdminModels::FScheduledTask& elem : In.Data.Tasks)
    {
        FBPAdminScheduledTask result;
        result.Data = elem;
        OutTasks.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminGetTitleDataRequest(
		const FBPAdminGetTitleDataRequest& In
        ,TArray<FString>& OutKeys
	)
{
    OutKeys = In.Data.Keys;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetTitleDataResult(
		const FBPAdminGetTitleDataResult& In
	)
{
    
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetUserBansRequest(
		const FBPAdminGetUserBansRequest& In
        ,FString& OutPlayFabId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetUserBansResult(
		const FBPAdminGetUserBansResult& In
        ,TArray<FBPAdminBanInfo>& OutBanData
	)
{
    for (const PlayFab::AdminModels::FBanInfo& elem : In.Data.BanData)
    {
        FBPAdminBanInfo result;
        result.Data = elem;
        OutBanData.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminGetUserDataRequest(
		const FBPAdminGetUserDataRequest& In
        ,FString& OutPlayFabId
        ,TArray<FString>& OutKeys
        ,int32& OutIfChangedFromDataVersion
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutKeys = In.Data.Keys;
	OutIfChangedFromDataVersion = In.Data.IfChangedFromDataVersion;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetUserDataResult(
		const FBPAdminGetUserDataResult& In
        ,FString& OutPlayFabId
        ,int32& OutDataVersion
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutDataVersion = In.Data.DataVersion;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetUserInventoryRequest(
		const FBPAdminGetUserInventoryRequest& In
        ,FString& OutPlayFabId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminGetUserInventoryResult(
		const FBPAdminGetUserInventoryResult& In
        ,FString& OutPlayFabId
        ,TArray<FBPAdminItemInstance>& OutInventory
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	for (const PlayFab::AdminModels::FItemInstance& elem : In.Data.Inventory)
    {
        FBPAdminItemInstance result;
        result.Data = elem;
        OutInventory.Add(result);
    }

	
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminGrantedItemInstance(
		const FBPAdminGrantedItemInstance& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,bool& OutResult
        ,FString& OutItemId
        ,FString& OutItemInstanceId
        ,FString& OutItemClass
        ,FDateTime& OutPurchaseDate
        ,FDateTime& OutExpiration
        ,int32& OutRemainingUses
        ,int32& OutUsesIncrementedBy
        ,FString& OutAnnotation
        ,FString& OutCatalogVersion
        ,FString& OutBundleParent
        ,FString& OutDisplayName
        ,FString& OutUnitCurrency
        ,int32& OutUnitPrice
        ,TArray<FString>& OutBundleContents
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	OutResult = In.Data.Result;
	OutItemId = In.Data.ItemId;
	OutItemInstanceId = In.Data.ItemInstanceId;
	OutItemClass = In.Data.ItemClass;
	
	
	OutRemainingUses = In.Data.RemainingUses;
	OutUsesIncrementedBy = In.Data.UsesIncrementedBy;
	OutAnnotation = In.Data.Annotation;
	OutCatalogVersion = In.Data.CatalogVersion;
	OutBundleParent = In.Data.BundleParent;
	OutDisplayName = In.Data.DisplayName;
	OutUnitCurrency = In.Data.UnitCurrency;
	OutUnitPrice = In.Data.UnitPrice;
	OutBundleContents = In.Data.BundleContents;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminGrantItemsToUsersRequest(
		const FBPAdminGrantItemsToUsersRequest& In
        ,FString& OutCatalogVersion
        ,TArray<FBPAdminItemGrant>& OutItemGrants
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	for (const PlayFab::AdminModels::FItemGrant& elem : In.Data.ItemGrants)
    {
        FBPAdminItemGrant result;
        result.Data = elem;
        OutItemGrants.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminGrantItemsToUsersResult(
		const FBPAdminGrantItemsToUsersResult& In
        ,TArray<FBPAdminGrantedItemInstance>& OutItemGrantResults
	)
{
    for (const PlayFab::AdminModels::FGrantedItemInstance& elem : In.Data.ItemGrantResults)
    {
        FBPAdminGrantedItemInstance result;
        result.Data = elem;
        OutItemGrantResults.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminIncrementPlayerStatisticVersionRequest(
		const FBPAdminIncrementPlayerStatisticVersionRequest& In
        ,FString& OutStatisticName
	)
{
    OutStatisticName = In.Data.StatisticName;
	
}

void UPFAdminProxyLibrary::BreakBPAdminIncrementPlayerStatisticVersionResult(
		const FBPAdminIncrementPlayerStatisticVersionResult& In
        ,FBPAdminPlayerStatisticVersion& OutStatisticVersion
	)
{
    if (In.Data.StatisticVersion.IsValid()) {    OutStatisticVersion.Data = *In.Data.StatisticVersion;}
	
}

void UPFAdminProxyLibrary::BreakBPAdminItemGrant(
		const FBPAdminItemGrant& In
        ,FString& OutPlayFabId
        ,FString& OutItemId
        ,FString& OutAnnotation
        ,FString& OutCharacterId
        ,TArray<FString>& OutKeysToRemove
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutItemId = In.Data.ItemId;
	OutAnnotation = In.Data.Annotation;
	OutCharacterId = In.Data.CharacterId;
	
	OutKeysToRemove = In.Data.KeysToRemove;
	
}

void UPFAdminProxyLibrary::BreakBPAdminItemInstance(
		const FBPAdminItemInstance& In
        ,FString& OutItemId
        ,FString& OutItemInstanceId
        ,FString& OutItemClass
        ,FDateTime& OutPurchaseDate
        ,FDateTime& OutExpiration
        ,int32& OutRemainingUses
        ,int32& OutUsesIncrementedBy
        ,FString& OutAnnotation
        ,FString& OutCatalogVersion
        ,FString& OutBundleParent
        ,FString& OutDisplayName
        ,FString& OutUnitCurrency
        ,int32& OutUnitPrice
        ,TArray<FString>& OutBundleContents
	)
{
    OutItemId = In.Data.ItemId;
	OutItemInstanceId = In.Data.ItemInstanceId;
	OutItemClass = In.Data.ItemClass;
	
	
	OutRemainingUses = In.Data.RemainingUses;
	OutUsesIncrementedBy = In.Data.UsesIncrementedBy;
	OutAnnotation = In.Data.Annotation;
	OutCatalogVersion = In.Data.CatalogVersion;
	OutBundleParent = In.Data.BundleParent;
	OutDisplayName = In.Data.DisplayName;
	OutUnitCurrency = In.Data.UnitCurrency;
	OutUnitPrice = In.Data.UnitPrice;
	OutBundleContents = In.Data.BundleContents;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminListBuildsRequest(
		const FBPAdminListBuildsRequest& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminListBuildsResult(
		const FBPAdminListBuildsResult& In
        ,TArray<FBPAdminGetServerBuildInfoResult>& OutBuilds
	)
{
    for (const PlayFab::AdminModels::FGetServerBuildInfoResult& elem : In.Data.Builds)
    {
        FBPAdminGetServerBuildInfoResult result;
        result.Data = elem;
        OutBuilds.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminListVirtualCurrencyTypesRequest(
		const FBPAdminListVirtualCurrencyTypesRequest& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminListVirtualCurrencyTypesResult(
		const FBPAdminListVirtualCurrencyTypesResult& In
        ,TArray<FBPAdminVirtualCurrencyData>& OutVirtualCurrencies
	)
{
    for (const PlayFab::AdminModels::FVirtualCurrencyData& elem : In.Data.VirtualCurrencies)
    {
        FBPAdminVirtualCurrencyData result;
        result.Data = elem;
        OutVirtualCurrencies.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminLoginIdentityProvider(
		const FBPAdminLoginIdentityProvider& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminLogStatement(
		const FBPAdminLogStatement& In
        ,FString& OutLevel
        ,FString& OutMessage
	)
{
    OutLevel = In.Data.Level;
	OutMessage = In.Data.Message;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminLookupUserAccountInfoRequest(
		const FBPAdminLookupUserAccountInfoRequest& In
        ,FString& OutPlayFabId
        ,FString& OutEmail
        ,FString& OutUsername
        ,FString& OutTitleDisplayName
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutEmail = In.Data.Email;
	OutUsername = In.Data.Username;
	OutTitleDisplayName = In.Data.TitleDisplayName;
	
}

void UPFAdminProxyLibrary::BreakBPAdminLookupUserAccountInfoResult(
		const FBPAdminLookupUserAccountInfoResult& In
        ,FBPAdminUserAccountInfo& OutUserInfo
	)
{
    if (In.Data.UserInfo.IsValid()) {    OutUserInfo.Data = *In.Data.UserInfo;}
	
}

void UPFAdminProxyLibrary::BreakBPAdminModifyMatchmakerGameModesRequest(
		const FBPAdminModifyMatchmakerGameModesRequest& In
        ,FString& OutBuildVersion
        ,TArray<FBPAdminGameModeInfo>& OutGameModes
	)
{
    OutBuildVersion = In.Data.BuildVersion;
	for (const PlayFab::AdminModels::FGameModeInfo& elem : In.Data.GameModes)
    {
        FBPAdminGameModeInfo result;
        result.Data = elem;
        OutGameModes.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminModifyMatchmakerGameModesResult(
		const FBPAdminModifyMatchmakerGameModesResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminModifyServerBuildRequest(
		const FBPAdminModifyServerBuildRequest& In
        ,FString& OutBuildId
        ,FDateTime& OutTimestamp
        ,int32& OutMaxGamesPerHost
        ,int32& OutMinFreeGameSlots
        ,FString& OutCommandLineTemplate
        ,FString& OutExecutablePath
        ,FString& OutComment
	)
{
    OutBuildId = In.Data.BuildId;
	
	
	OutMaxGamesPerHost = In.Data.MaxGamesPerHost;
	OutMinFreeGameSlots = In.Data.MinFreeGameSlots;
	OutCommandLineTemplate = In.Data.CommandLineTemplate;
	OutExecutablePath = In.Data.ExecutablePath;
	OutComment = In.Data.Comment;
	
}

void UPFAdminProxyLibrary::BreakBPAdminModifyServerBuildResult(
		const FBPAdminModifyServerBuildResult& In
        ,FString& OutBuildId
        ,int32& OutMaxGamesPerHost
        ,int32& OutMinFreeGameSlots
        ,FString& OutCommandLineTemplate
        ,FString& OutExecutablePath
        ,FString& OutComment
        ,FDateTime& OutTimestamp
        ,FString& OutTitleId
	)
{
    OutBuildId = In.Data.BuildId;
	
	OutMaxGamesPerHost = In.Data.MaxGamesPerHost;
	OutMinFreeGameSlots = In.Data.MinFreeGameSlots;
	OutCommandLineTemplate = In.Data.CommandLineTemplate;
	OutExecutablePath = In.Data.ExecutablePath;
	OutComment = In.Data.Comment;
	
	OutTitleId = In.Data.TitleId;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminModifyUserVirtualCurrencyResult(
		const FBPAdminModifyUserVirtualCurrencyResult& In
        ,FString& OutPlayFabId
        ,FString& OutVirtualCurrency
        ,int32& OutBalanceChange
        ,int32& OutBalance
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutVirtualCurrency = In.Data.VirtualCurrency;
	OutBalanceChange = In.Data.BalanceChange;
	OutBalance = In.Data.Balance;
	
}

void UPFAdminProxyLibrary::BreakBPAdminNameIdentifier(
		const FBPAdminNameIdentifier& In
        ,FString& OutName
        ,FString& OutId
	)
{
    OutName = In.Data.Name;
	OutId = In.Data.Id;
	
}

void UPFAdminProxyLibrary::BreakBPAdminPermissionStatement(
		const FBPAdminPermissionStatement& In
        ,FString& OutResource
        ,FString& OutAction
        ,FString& OutPrincipal
        ,FString& OutComment
	)
{
    OutResource = In.Data.Resource;
	OutAction = In.Data.Action;
	
	OutPrincipal = In.Data.Principal;
	OutComment = In.Data.Comment;
	
}

void UPFAdminProxyLibrary::BreakBPAdminPlayerLinkedAccount(
		const FBPAdminPlayerLinkedAccount& In
        ,FString& OutPlatformUserId
        ,FString& OutUsername
        ,FString& OutEmail
	)
{
    
	OutPlatformUserId = In.Data.PlatformUserId;
	OutUsername = In.Data.Username;
	OutEmail = In.Data.Email;
	
}

void UPFAdminProxyLibrary::BreakBPAdminPlayerLocation(
		const FBPAdminPlayerLocation& In
        ,FString& OutCity
        ,float& OutLatitude
        ,float& OutLongitude
	)
{
    
	
	OutCity = In.Data.City;
	OutLatitude = In.Data.Latitude;
	OutLongitude = In.Data.Longitude;
	
}

void UPFAdminProxyLibrary::BreakBPAdminPlayerProfile(
		const FBPAdminPlayerProfile& In
        ,FString& OutPlayerId
        ,FString& OutTitleId
        ,FString& OutDisplayName
        ,FString& OutPublisherId
        ,FDateTime& OutCreated
        ,FDateTime& OutLastLogin
        ,FDateTime& OutBannedUntil
        ,int32& OutTotalValueToDateInUSD
        ,TArray<FString>& OutTags
        ,TArray<FBPAdminAdCampaignAttribution>& OutAdCampaignAttributions
        ,TArray<FBPAdminPushNotificationRegistration>& OutPushNotificationRegistrations
        ,TArray<FBPAdminPlayerLinkedAccount>& OutLinkedAccounts
        ,TArray<FBPAdminPlayerStatistic>& OutPlayerStatistics
	)
{
    OutPlayerId = In.Data.PlayerId;
	OutTitleId = In.Data.TitleId;
	OutDisplayName = In.Data.DisplayName;
	OutPublisherId = In.Data.PublisherId;
	
	
	
	
	
	OutTotalValueToDateInUSD = In.Data.TotalValueToDateInUSD;
	
	OutTags = In.Data.Tags;
	
	
	for (const PlayFab::AdminModels::FAdCampaignAttribution& elem : In.Data.AdCampaignAttributions)
    {
        FBPAdminAdCampaignAttribution result;
        result.Data = elem;
        OutAdCampaignAttributions.Add(result);
    }

	for (const PlayFab::AdminModels::FPushNotificationRegistration& elem : In.Data.PushNotificationRegistrations)
    {
        FBPAdminPushNotificationRegistration result;
        result.Data = elem;
        OutPushNotificationRegistrations.Add(result);
    }

	for (const PlayFab::AdminModels::FPlayerLinkedAccount& elem : In.Data.LinkedAccounts)
    {
        FBPAdminPlayerLinkedAccount result;
        result.Data = elem;
        OutLinkedAccounts.Add(result);
    }

	for (const PlayFab::AdminModels::FPlayerStatistic& elem : In.Data.PlayerStatistics)
    {
        FBPAdminPlayerStatistic result;
        result.Data = elem;
        OutPlayerStatistics.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminPlayerStatistic(
		const FBPAdminPlayerStatistic& In
        ,FString& OutId
        ,int32& OutStatisticVersion
        ,int32& OutStatisticValue
        ,FString& OutName
	)
{
    OutId = In.Data.Id;
	OutStatisticVersion = In.Data.StatisticVersion;
	OutStatisticValue = In.Data.StatisticValue;
	OutName = In.Data.Name;
	
}

void UPFAdminProxyLibrary::BreakBPAdminPlayerStatisticDefinition(
		const FBPAdminPlayerStatisticDefinition& In
        ,FString& OutStatisticName
        ,int32& OutCurrentVersion
	)
{
    OutStatisticName = In.Data.StatisticName;
	OutCurrentVersion = In.Data.CurrentVersion;
	
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminPlayerStatisticVersion(
		const FBPAdminPlayerStatisticVersion& In
        ,FString& OutStatisticName
        ,int32& OutVersion
        ,FDateTime& OutScheduledActivationTime
        ,FDateTime& OutActivationTime
        ,FDateTime& OutScheduledDeactivationTime
        ,FDateTime& OutDeactivationTime
        ,FString& OutArchiveDownloadUrl
	)
{
    OutStatisticName = In.Data.StatisticName;
	OutVersion = In.Data.Version;
	
	
	
	
	
	OutArchiveDownloadUrl = In.Data.ArchiveDownloadUrl;
	
}

void UPFAdminProxyLibrary::BreakBPAdminPushNotificationPlatform(
		const FBPAdminPushNotificationPlatform& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminPushNotificationRegistration(
		const FBPAdminPushNotificationRegistration& In
        ,FString& OutNotificationEndpointARN
	)
{
    
	OutNotificationEndpointARN = In.Data.NotificationEndpointARN;
	
}

void UPFAdminProxyLibrary::BreakBPAdminRandomResultTable(
		const FBPAdminRandomResultTable& In
        ,FString& OutTableId
        ,TArray<FBPAdminResultTableNode>& OutNodes
	)
{
    OutTableId = In.Data.TableId;
	for (const PlayFab::AdminModels::FResultTableNode& elem : In.Data.Nodes)
    {
        FBPAdminResultTableNode result;
        result.Data = elem;
        OutNodes.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminRandomResultTableListing(
		const FBPAdminRandomResultTableListing& In
        ,FString& OutCatalogVersion
        ,FString& OutTableId
        ,TArray<FBPAdminResultTableNode>& OutNodes
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	OutTableId = In.Data.TableId;
	for (const PlayFab::AdminModels::FResultTableNode& elem : In.Data.Nodes)
    {
        FBPAdminResultTableNode result;
        result.Data = elem;
        OutNodes.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminRefundPurchaseRequest(
		const FBPAdminRefundPurchaseRequest& In
        ,FString& OutPlayFabId
        ,FString& OutOrderId
        ,FString& OutReason
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutOrderId = In.Data.OrderId;
	OutReason = In.Data.Reason;
	
}

void UPFAdminProxyLibrary::BreakBPAdminRefundPurchaseResponse(
		const FBPAdminRefundPurchaseResponse& In
        ,FString& OutPurchaseStatus
	)
{
    OutPurchaseStatus = In.Data.PurchaseStatus;
	
}

void UPFAdminProxyLibrary::BreakBPAdminRegion(
		const FBPAdminRegion& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminRemovePlayerTagRequest(
		const FBPAdminRemovePlayerTagRequest& In
        ,FString& OutPlayFabId
        ,FString& OutTagName
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutTagName = In.Data.TagName;
	
}

void UPFAdminProxyLibrary::BreakBPAdminRemovePlayerTagResult(
		const FBPAdminRemovePlayerTagResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminRemoveServerBuildRequest(
		const FBPAdminRemoveServerBuildRequest& In
        ,FString& OutBuildId
	)
{
    OutBuildId = In.Data.BuildId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminRemoveServerBuildResult(
		const FBPAdminRemoveServerBuildResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminRemoveVirtualCurrencyTypesRequest(
		const FBPAdminRemoveVirtualCurrencyTypesRequest& In
        ,TArray<FBPAdminVirtualCurrencyData>& OutVirtualCurrencies
	)
{
    for (const PlayFab::AdminModels::FVirtualCurrencyData& elem : In.Data.VirtualCurrencies)
    {
        FBPAdminVirtualCurrencyData result;
        result.Data = elem;
        OutVirtualCurrencies.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminResetCharacterStatisticsRequest(
		const FBPAdminResetCharacterStatisticsRequest& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminResetCharacterStatisticsResult(
		const FBPAdminResetCharacterStatisticsResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminResetUsersRequest(
		const FBPAdminResetUsersRequest& In
        ,TArray<FBPAdminUserCredentials>& OutUsers
	)
{
    for (const PlayFab::AdminModels::FUserCredentials& elem : In.Data.Users)
    {
        FBPAdminUserCredentials result;
        result.Data = elem;
        OutUsers.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminResetUserStatisticsRequest(
		const FBPAdminResetUserStatisticsRequest& In
        ,FString& OutPlayFabId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminResetUserStatisticsResult(
		const FBPAdminResetUserStatisticsResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminResolutionOutcome(
		const FBPAdminResolutionOutcome& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminResolvePurchaseDisputeRequest(
		const FBPAdminResolvePurchaseDisputeRequest& In
        ,FString& OutPlayFabId
        ,FString& OutOrderId
        ,FString& OutReason
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutOrderId = In.Data.OrderId;
	OutReason = In.Data.Reason;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminResolvePurchaseDisputeResponse(
		const FBPAdminResolvePurchaseDisputeResponse& In
        ,FString& OutPurchaseStatus
	)
{
    OutPurchaseStatus = In.Data.PurchaseStatus;
	
}

void UPFAdminProxyLibrary::BreakBPAdminResultTableNode(
		const FBPAdminResultTableNode& In
        ,FString& OutResultItem
        ,int32& OutWeight
	)
{
    
	OutResultItem = In.Data.ResultItem;
	OutWeight = In.Data.Weight;
	
}

void UPFAdminProxyLibrary::BreakBPAdminResultTableNodeType(
		const FBPAdminResultTableNodeType& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminRevokeAllBansForUserRequest(
		const FBPAdminRevokeAllBansForUserRequest& In
        ,FString& OutPlayFabId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminRevokeAllBansForUserResult(
		const FBPAdminRevokeAllBansForUserResult& In
        ,TArray<FBPAdminBanInfo>& OutBanData
	)
{
    for (const PlayFab::AdminModels::FBanInfo& elem : In.Data.BanData)
    {
        FBPAdminBanInfo result;
        result.Data = elem;
        OutBanData.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminRevokeBansRequest(
		const FBPAdminRevokeBansRequest& In
        ,TArray<FString>& OutBanIds
	)
{
    OutBanIds = In.Data.BanIds;
	
}

void UPFAdminProxyLibrary::BreakBPAdminRevokeBansResult(
		const FBPAdminRevokeBansResult& In
        ,TArray<FBPAdminBanInfo>& OutBanData
	)
{
    for (const PlayFab::AdminModels::FBanInfo& elem : In.Data.BanData)
    {
        FBPAdminBanInfo result;
        result.Data = elem;
        OutBanData.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminRevokeInventoryItemRequest(
		const FBPAdminRevokeInventoryItemRequest& In
        ,FString& OutPlayFabId
        ,FString& OutCharacterId
        ,FString& OutItemInstanceId
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutCharacterId = In.Data.CharacterId;
	OutItemInstanceId = In.Data.ItemInstanceId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminRevokeInventoryResult(
		const FBPAdminRevokeInventoryResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminRunTaskRequest(
		const FBPAdminRunTaskRequest& In
        ,FBPAdminNameIdentifier& OutIdentifier
	)
{
    if (In.Data.Identifier.IsValid()) {    OutIdentifier.Data = *In.Data.Identifier;}
	
}

void UPFAdminProxyLibrary::BreakBPAdminRunTaskResult(
		const FBPAdminRunTaskResult& In
        ,FString& OutTaskInstanceId
	)
{
    OutTaskInstanceId = In.Data.TaskInstanceId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminScheduledTask(
		const FBPAdminScheduledTask& In
        ,FString& OutTaskId
        ,FString& OutName
        ,FString& OutDescription
        ,FString& OutSchedule
        ,bool& OutIsActive
        ,FDateTime& OutLastRunTime
        ,FDateTime& OutNextRunTime
	)
{
    OutTaskId = In.Data.TaskId;
	OutName = In.Data.Name;
	OutDescription = In.Data.Description;
	OutSchedule = In.Data.Schedule;
	OutIsActive = In.Data.IsActive;
	
	
	
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminScheduledTaskType(
		const FBPAdminScheduledTaskType& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminScriptExecutionError(
		const FBPAdminScriptExecutionError& In
        ,FString& OutError
        ,FString& OutMessage
        ,FString& OutStackTrace
	)
{
    OutError = In.Data.Error;
	OutMessage = In.Data.Message;
	OutStackTrace = In.Data.StackTrace;
	
}

void UPFAdminProxyLibrary::BreakBPAdminSendAccountRecoveryEmailRequest(
		const FBPAdminSendAccountRecoveryEmailRequest& In
        ,FString& OutEmail
	)
{
    OutEmail = In.Data.Email;
	
}

void UPFAdminProxyLibrary::BreakBPAdminSendAccountRecoveryEmailResult(
		const FBPAdminSendAccountRecoveryEmailResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminSetPublishedRevisionRequest(
		const FBPAdminSetPublishedRevisionRequest& In
        ,int32& OutVersion
        ,int32& OutRevision
	)
{
    OutVersion = In.Data.Version;
	OutRevision = In.Data.Revision;
	
}

void UPFAdminProxyLibrary::BreakBPAdminSetPublishedRevisionResult(
		const FBPAdminSetPublishedRevisionResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminSetPublisherDataRequest(
		const FBPAdminSetPublisherDataRequest& In
        ,FString& OutKey
        ,FString& OutValue
	)
{
    OutKey = In.Data.Key;
	OutValue = In.Data.Value;
	
}

void UPFAdminProxyLibrary::BreakBPAdminSetPublisherDataResult(
		const FBPAdminSetPublisherDataResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminSetTitleDataRequest(
		const FBPAdminSetTitleDataRequest& In
        ,FString& OutKey
        ,FString& OutValue
	)
{
    OutKey = In.Data.Key;
	OutValue = In.Data.Value;
	
}

void UPFAdminProxyLibrary::BreakBPAdminSetTitleDataResult(
		const FBPAdminSetTitleDataResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminSetupPushNotificationRequest(
		const FBPAdminSetupPushNotificationRequest& In
        ,FString& OutName
        ,FString& OutPlatform
        ,FString& OutKey
        ,FString& OutCredential
        ,bool& OutOverwriteOldARN
	)
{
    OutName = In.Data.Name;
	OutPlatform = In.Data.Platform;
	OutKey = In.Data.Key;
	OutCredential = In.Data.Credential;
	OutOverwriteOldARN = In.Data.OverwriteOldARN;
	
}

void UPFAdminProxyLibrary::BreakBPAdminSetupPushNotificationResult(
		const FBPAdminSetupPushNotificationResult& In
        ,FString& OutARN
	)
{
    OutARN = In.Data.ARN;
	
}

void UPFAdminProxyLibrary::BreakBPAdminSourceType(
		const FBPAdminSourceType& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminStatisticAggregationMethod(
		const FBPAdminStatisticAggregationMethod& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminStatisticResetIntervalOption(
		const FBPAdminStatisticResetIntervalOption& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminStatisticVersionArchivalStatus(
		const FBPAdminStatisticVersionArchivalStatus& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminStoreItem(
		const FBPAdminStoreItem& In
        ,FString& OutItemId
        ,int32& OutDisplayPosition
	)
{
    OutItemId = In.Data.ItemId;
	
	
	
	OutDisplayPosition = In.Data.DisplayPosition;
	
}

void UPFAdminProxyLibrary::BreakBPAdminStoreMarketingModel(
		const FBPAdminStoreMarketingModel& In
        ,FString& OutDisplayName
        ,FString& OutDescription
	)
{
    OutDisplayName = In.Data.DisplayName;
	OutDescription = In.Data.Description;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminSubtractUserVirtualCurrencyRequest(
		const FBPAdminSubtractUserVirtualCurrencyRequest& In
        ,FString& OutPlayFabId
        ,FString& OutVirtualCurrency
        ,int32& OutAmount
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutVirtualCurrency = In.Data.VirtualCurrency;
	OutAmount = In.Data.Amount;
	
}

void UPFAdminProxyLibrary::BreakBPAdminTaskInstanceBasicSummary(
		const FBPAdminTaskInstanceBasicSummary& In
        ,FString& OutTaskInstanceId
        ,FBPAdminNameIdentifier& OutTaskIdentifier
        ,FDateTime& OutStartedAt
        ,FDateTime& OutCompletedAt
        ,float& OutPercentComplete
        ,float& OutEstimatedSecondsRemaining
        ,FString& OutScheduledByUserId
	)
{
    OutTaskInstanceId = In.Data.TaskInstanceId;
	if (In.Data.TaskIdentifier.IsValid()) {    OutTaskIdentifier.Data = *In.Data.TaskIdentifier;}
	
	
	
	OutPercentComplete = In.Data.PercentComplete;
	OutEstimatedSecondsRemaining = In.Data.EstimatedSecondsRemaining;
	OutScheduledByUserId = In.Data.ScheduledByUserId;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminTaskInstanceStatus(
		const FBPAdminTaskInstanceStatus& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminTitleActivationStatus(
		const FBPAdminTitleActivationStatus& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateBanRequest(
		const FBPAdminUpdateBanRequest& In
        ,FString& OutBanId
        ,FString& OutReason
        ,FDateTime& OutExpires
        ,FString& OutIPAddress
        ,FString& OutMACAddress
        ,bool& OutPermanent
        ,bool& OutActive
	)
{
    OutBanId = In.Data.BanId;
	OutReason = In.Data.Reason;
	
	OutIPAddress = In.Data.IPAddress;
	OutMACAddress = In.Data.MACAddress;
	OutPermanent = In.Data.Permanent;
	OutActive = In.Data.Active;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateBansRequest(
		const FBPAdminUpdateBansRequest& In
        ,TArray<FBPAdminUpdateBanRequest>& OutBans
	)
{
    for (const PlayFab::AdminModels::FUpdateBanRequest& elem : In.Data.Bans)
    {
        FBPAdminUpdateBanRequest result;
        result.Data = elem;
        OutBans.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateBansResult(
		const FBPAdminUpdateBansResult& In
        ,TArray<FBPAdminBanInfo>& OutBanData
	)
{
    for (const PlayFab::AdminModels::FBanInfo& elem : In.Data.BanData)
    {
        FBPAdminBanInfo result;
        result.Data = elem;
        OutBanData.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateCatalogItemsRequest(
		const FBPAdminUpdateCatalogItemsRequest& In
        ,FString& OutCatalogVersion
        ,bool& OutSetAsDefaultCatalog
        ,TArray<FBPAdminCatalogItem>& OutCatalog
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	OutSetAsDefaultCatalog = In.Data.SetAsDefaultCatalog;
	for (const PlayFab::AdminModels::FCatalogItem& elem : In.Data.Catalog)
    {
        FBPAdminCatalogItem result;
        result.Data = elem;
        OutCatalog.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateCatalogItemsResult(
		const FBPAdminUpdateCatalogItemsResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateCloudScriptRequest(
		const FBPAdminUpdateCloudScriptRequest& In
        ,TArray<FBPAdminCloudScriptFile>& OutFiles
        ,bool& OutPublish
        ,FString& OutDeveloperPlayFabId
	)
{
    for (const PlayFab::AdminModels::FCloudScriptFile& elem : In.Data.Files)
    {
        FBPAdminCloudScriptFile result;
        result.Data = elem;
        OutFiles.Add(result);
    }

	OutPublish = In.Data.Publish;
	OutDeveloperPlayFabId = In.Data.DeveloperPlayFabId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateCloudScriptResult(
		const FBPAdminUpdateCloudScriptResult& In
        ,int32& OutVersion
        ,int32& OutRevision
	)
{
    OutVersion = In.Data.Version;
	OutRevision = In.Data.Revision;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdatePlayerStatisticDefinitionRequest(
		const FBPAdminUpdatePlayerStatisticDefinitionRequest& In
        ,FString& OutStatisticName
	)
{
    OutStatisticName = In.Data.StatisticName;
	
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdatePlayerStatisticDefinitionResult(
		const FBPAdminUpdatePlayerStatisticDefinitionResult& In
        ,FBPAdminPlayerStatisticDefinition& OutStatistic
	)
{
    if (In.Data.Statistic.IsValid()) {    OutStatistic.Data = *In.Data.Statistic;}
	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdatePolicyRequest(
		const FBPAdminUpdatePolicyRequest& In
        ,FString& OutPolicyName
        ,TArray<FBPAdminPermissionStatement>& OutStatements
        ,bool& OutOverwritePolicy
	)
{
    OutPolicyName = In.Data.PolicyName;
	for (const PlayFab::AdminModels::FPermissionStatement& elem : In.Data.Statements)
    {
        FBPAdminPermissionStatement result;
        result.Data = elem;
        OutStatements.Add(result);
    }

	OutOverwritePolicy = In.Data.OverwritePolicy;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdatePolicyResponse(
		const FBPAdminUpdatePolicyResponse& In
        ,FString& OutPolicyName
        ,TArray<FBPAdminPermissionStatement>& OutStatements
	)
{
    OutPolicyName = In.Data.PolicyName;
	for (const PlayFab::AdminModels::FPermissionStatement& elem : In.Data.Statements)
    {
        FBPAdminPermissionStatement result;
        result.Data = elem;
        OutStatements.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateRandomResultTablesRequest(
		const FBPAdminUpdateRandomResultTablesRequest& In
        ,FString& OutCatalogVersion
        ,TArray<FBPAdminRandomResultTable>& OutTables
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	for (const PlayFab::AdminModels::FRandomResultTable& elem : In.Data.Tables)
    {
        FBPAdminRandomResultTable result;
        result.Data = elem;
        OutTables.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateRandomResultTablesResult(
		const FBPAdminUpdateRandomResultTablesResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateStoreItemsRequest(
		const FBPAdminUpdateStoreItemsRequest& In
        ,FString& OutCatalogVersion
        ,FString& OutStoreId
        ,FBPAdminStoreMarketingModel& OutMarketingData
        ,TArray<FBPAdminStoreItem>& OutStore
	)
{
    OutCatalogVersion = In.Data.CatalogVersion;
	OutStoreId = In.Data.StoreId;
	if (In.Data.MarketingData.IsValid()) {    OutMarketingData.Data = *In.Data.MarketingData;}
	for (const PlayFab::AdminModels::FStoreItem& elem : In.Data.Store)
    {
        FBPAdminStoreItem result;
        result.Data = elem;
        OutStore.Add(result);
    }

	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateStoreItemsResult(
		const FBPAdminUpdateStoreItemsResult& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateTaskRequest(
		const FBPAdminUpdateTaskRequest& In
        ,FBPAdminNameIdentifier& OutIdentifier
        ,FString& OutName
        ,FString& OutDescription
        ,FString& OutSchedule
        ,bool& OutIsActive
	)
{
    if (In.Data.Identifier.IsValid()) {    OutIdentifier.Data = *In.Data.Identifier;}
	OutName = In.Data.Name;
	OutDescription = In.Data.Description;
	OutSchedule = In.Data.Schedule;
	OutIsActive = In.Data.IsActive;
	
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateUserDataRequest(
		const FBPAdminUpdateUserDataRequest& In
        ,FString& OutPlayFabId
        ,TArray<FString>& OutKeysToRemove
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
	OutKeysToRemove = In.Data.KeysToRemove;
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateUserDataResult(
		const FBPAdminUpdateUserDataResult& In
        ,int32& OutDataVersion
	)
{
    OutDataVersion = In.Data.DataVersion;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateUserInternalDataRequest(
		const FBPAdminUpdateUserInternalDataRequest& In
        ,FString& OutPlayFabId
        ,TArray<FString>& OutKeysToRemove
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
	OutKeysToRemove = In.Data.KeysToRemove;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateUserTitleDisplayNameRequest(
		const FBPAdminUpdateUserTitleDisplayNameRequest& In
        ,FString& OutPlayFabId
        ,FString& OutDisplayName
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	OutDisplayName = In.Data.DisplayName;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUpdateUserTitleDisplayNameResult(
		const FBPAdminUpdateUserTitleDisplayNameResult& In
        ,FString& OutDisplayName
	)
{
    OutDisplayName = In.Data.DisplayName;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserAccountInfo(
		const FBPAdminUserAccountInfo& In
        ,FString& OutPlayFabId
        ,FDateTime& OutCreated
        ,FString& OutUsername
        ,FBPAdminUserTitleInfo& OutTitleInfo
        ,FBPAdminUserPrivateAccountInfo& OutPrivateInfo
        ,FBPAdminUserFacebookInfo& OutFacebookInfo
        ,FBPAdminUserSteamInfo& OutSteamInfo
        ,FBPAdminUserGameCenterInfo& OutGameCenterInfo
        ,FBPAdminUserIosDeviceInfo& OutIosDeviceInfo
        ,FBPAdminUserAndroidDeviceInfo& OutAndroidDeviceInfo
        ,FBPAdminUserKongregateInfo& OutKongregateInfo
        ,FBPAdminUserTwitchInfo& OutTwitchInfo
        ,FBPAdminUserPsnInfo& OutPsnInfo
        ,FBPAdminUserGoogleInfo& OutGoogleInfo
        ,FBPAdminUserXboxInfo& OutXboxInfo
        ,FBPAdminUserCustomIdInfo& OutCustomIdInfo
	)
{
    OutPlayFabId = In.Data.PlayFabId;
	
	OutUsername = In.Data.Username;
	if (In.Data.TitleInfo.IsValid()) {    OutTitleInfo.Data = *In.Data.TitleInfo;}
	if (In.Data.PrivateInfo.IsValid()) {    OutPrivateInfo.Data = *In.Data.PrivateInfo;}
	if (In.Data.FacebookInfo.IsValid()) {    OutFacebookInfo.Data = *In.Data.FacebookInfo;}
	if (In.Data.SteamInfo.IsValid()) {    OutSteamInfo.Data = *In.Data.SteamInfo;}
	if (In.Data.GameCenterInfo.IsValid()) {    OutGameCenterInfo.Data = *In.Data.GameCenterInfo;}
	if (In.Data.IosDeviceInfo.IsValid()) {    OutIosDeviceInfo.Data = *In.Data.IosDeviceInfo;}
	if (In.Data.AndroidDeviceInfo.IsValid()) {    OutAndroidDeviceInfo.Data = *In.Data.AndroidDeviceInfo;}
	if (In.Data.KongregateInfo.IsValid()) {    OutKongregateInfo.Data = *In.Data.KongregateInfo;}
	if (In.Data.TwitchInfo.IsValid()) {    OutTwitchInfo.Data = *In.Data.TwitchInfo;}
	if (In.Data.PsnInfo.IsValid()) {    OutPsnInfo.Data = *In.Data.PsnInfo;}
	if (In.Data.GoogleInfo.IsValid()) {    OutGoogleInfo.Data = *In.Data.GoogleInfo;}
	if (In.Data.XboxInfo.IsValid()) {    OutXboxInfo.Data = *In.Data.XboxInfo;}
	if (In.Data.CustomIdInfo.IsValid()) {    OutCustomIdInfo.Data = *In.Data.CustomIdInfo;}
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserAndroidDeviceInfo(
		const FBPAdminUserAndroidDeviceInfo& In
        ,FString& OutAndroidDeviceId
	)
{
    OutAndroidDeviceId = In.Data.AndroidDeviceId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserCredentials(
		const FBPAdminUserCredentials& In
        ,FString& OutUsername
        ,FString& OutPassword
	)
{
    OutUsername = In.Data.Username;
	OutPassword = In.Data.Password;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserCustomIdInfo(
		const FBPAdminUserCustomIdInfo& In
        ,FString& OutCustomId
	)
{
    OutCustomId = In.Data.CustomId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserDataPermission(
		const FBPAdminUserDataPermission& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminUserDataRecord(
		const FBPAdminUserDataRecord& In
        ,FString& OutValue
        ,FDateTime& OutLastUpdated
	)
{
    OutValue = In.Data.Value;
	
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserFacebookInfo(
		const FBPAdminUserFacebookInfo& In
        ,FString& OutFacebookId
        ,FString& OutFullName
	)
{
    OutFacebookId = In.Data.FacebookId;
	OutFullName = In.Data.FullName;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserGameCenterInfo(
		const FBPAdminUserGameCenterInfo& In
        ,FString& OutGameCenterId
	)
{
    OutGameCenterId = In.Data.GameCenterId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserGoogleInfo(
		const FBPAdminUserGoogleInfo& In
        ,FString& OutGoogleId
        ,FString& OutGoogleEmail
        ,FString& OutGoogleLocale
        ,FString& OutGoogleGender
	)
{
    OutGoogleId = In.Data.GoogleId;
	OutGoogleEmail = In.Data.GoogleEmail;
	OutGoogleLocale = In.Data.GoogleLocale;
	OutGoogleGender = In.Data.GoogleGender;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserIosDeviceInfo(
		const FBPAdminUserIosDeviceInfo& In
        ,FString& OutIosDeviceId
	)
{
    OutIosDeviceId = In.Data.IosDeviceId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserKongregateInfo(
		const FBPAdminUserKongregateInfo& In
        ,FString& OutKongregateId
        ,FString& OutKongregateName
	)
{
    OutKongregateId = In.Data.KongregateId;
	OutKongregateName = In.Data.KongregateName;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserOrigination(
		const FBPAdminUserOrigination& In
	)
{
    
}

void UPFAdminProxyLibrary::BreakBPAdminUserPrivateAccountInfo(
		const FBPAdminUserPrivateAccountInfo& In
        ,FString& OutEmail
	)
{
    OutEmail = In.Data.Email;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserPsnInfo(
		const FBPAdminUserPsnInfo& In
        ,FString& OutPsnAccountId
        ,FString& OutPsnOnlineId
	)
{
    OutPsnAccountId = In.Data.PsnAccountId;
	OutPsnOnlineId = In.Data.PsnOnlineId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserSteamInfo(
		const FBPAdminUserSteamInfo& In
        ,FString& OutSteamId
        ,FString& OutSteamCountry
	)
{
    OutSteamId = In.Data.SteamId;
	OutSteamCountry = In.Data.SteamCountry;
	
	
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserTitleInfo(
		const FBPAdminUserTitleInfo& In
        ,FString& OutDisplayName
        ,FDateTime& OutCreated
        ,FDateTime& OutLastLogin
        ,FDateTime& OutFirstLogin
        ,bool& OutisBanned
	)
{
    OutDisplayName = In.Data.DisplayName;
	
	
	
	
	OutisBanned = In.Data.isBanned;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserTwitchInfo(
		const FBPAdminUserTwitchInfo& In
        ,FString& OutTwitchId
        ,FString& OutTwitchUserName
	)
{
    OutTwitchId = In.Data.TwitchId;
	OutTwitchUserName = In.Data.TwitchUserName;
	
}

void UPFAdminProxyLibrary::BreakBPAdminUserXboxInfo(
		const FBPAdminUserXboxInfo& In
        ,FString& OutXboxUserId
	)
{
    OutXboxUserId = In.Data.XboxUserId;
	
}

void UPFAdminProxyLibrary::BreakBPAdminVirtualCurrencyData(
		const FBPAdminVirtualCurrencyData& In
        ,FString& OutCurrencyCode
        ,FString& OutDisplayName
        ,int32& OutInitialDeposit
        ,int32& OutRechargeRate
        ,int32& OutRechargeMax
	)
{
    OutCurrencyCode = In.Data.CurrencyCode;
	OutDisplayName = In.Data.DisplayName;
	OutInitialDeposit = In.Data.InitialDeposit;
	OutRechargeRate = In.Data.RechargeRate;
	OutRechargeMax = In.Data.RechargeMax;
	
}

void UPFAdminProxyLibrary::BreakBPAdminVirtualCurrencyRechargeTime(
		const FBPAdminVirtualCurrencyRechargeTime& In
        ,int32& OutSecondsToRecharge
        ,FDateTime& OutRechargeTime
        ,int32& OutRechargeMax
	)
{
    OutSecondsToRecharge = In.Data.SecondsToRecharge;
	
	OutRechargeMax = In.Data.RechargeMax;
	
}

